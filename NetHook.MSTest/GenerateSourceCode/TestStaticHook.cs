//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LocalHookProviders
{
    using System;
    using NetHook.Core;
    using System.Reflection;
    using System.Runtime.ConstrainedExecution;
    
    
    public sealed class LocalHookProvider_TestStaticMethod_0 : NetHook.Core.LocalHookRuntimeInstance
    {
        
        public LocalHookProvider_TestStaticMethod_0(NetHook.Core.LocalHookAdapter adapter) : 
                base(LocalHookAdapter.Current.Get("NetHook.MSTest.UnitTestLocalHook+TestInstance, NetHook.MSTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null;TestStaticMethod"),  typeof(LocalHookProvider_TestStaticMethod_0).GetMethod("TestStaticMethod_Hook", BindingFlags.Static | BindingFlags.NonPublic))
        {
        }
        
        private static object TestStaticMethod_Hook(object arg_0)
        {
            object[] objectArray = new object[] { arg_0 };
            object value = IntPtr.Zero;
            Exception e = null;
            object thisObj = null;
            LocalHookAdapter.Current.BeginInvoke("NetHook.MSTest.UnitTestLocalHook+TestInstance, NetHook.MSTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null;TestStaticMethod", thisObj, objectArray);
            try
            {
                if (objectArray.Length == 0) value = TestStaticMethod_Hook(arg_0);
                else if (objectArray.Length == 1) value = TestStaticMethod_Hook(arg_0);
                else if (objectArray.Length == 2) value = TestStaticMethod_Hook(arg_0);
                else if (objectArray.Length == 3) value = TestStaticMethod_Hook(arg_0);
                else value = TestStaticMethod_Hook(arg_0);
            }
            catch (System.Exception ex)
            {
                e = ex;
                throw;
            }
            finally
            {
                LocalHookAdapter.Current.AfterInvoke("NetHook.MSTest.UnitTestLocalHook+TestInstance, NetHook.MSTest, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null;TestStaticMethod", thisObj, value, e);
            }
            return value;
        }
    }
}
